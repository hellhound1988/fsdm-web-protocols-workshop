/**
 * @fileoverview gRPC-Web generated client stub for 
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.4.1
// 	protoc              v3.20.1
// source: demo.proto


/* eslint-disable */
// @ts-nocheck



const grpc = {};
grpc.web = require('grpc-web');

const proto = require('./demo_pb.js');

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.DemoServiceClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.DemoServicePromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.Empty,
 *   !proto.Profile>}
 */
const methodDescriptor_DemoService_GetProfile = new grpc.web.MethodDescriptor(
  '/DemoService/GetProfile',
  grpc.web.MethodType.UNARY,
  proto.Empty,
  proto.Profile,
  /**
   * @param {!proto.Empty} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.Profile.deserializeBinary
);


/**
 * @param {!proto.Empty} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.Profile)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.Profile>|undefined}
 *     The XHR Node Readable Stream
 */
proto.DemoServiceClient.prototype.getProfile =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/DemoService/GetProfile',
      request,
      metadata || {},
      methodDescriptor_DemoService_GetProfile,
      callback);
};


/**
 * @param {!proto.Empty} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.Profile>}
 *     Promise that resolves to the response
 */
proto.DemoServicePromiseClient.prototype.getProfile =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/DemoService/GetProfile',
      request,
      metadata || {},
      methodDescriptor_DemoService_GetProfile);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.Empty,
 *   !proto.Location>}
 */
const methodDescriptor_DemoService_GetLocation = new grpc.web.MethodDescriptor(
  '/DemoService/GetLocation',
  grpc.web.MethodType.UNARY,
  proto.Empty,
  proto.Location,
  /**
   * @param {!proto.Empty} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.Location.deserializeBinary
);


/**
 * @param {!proto.Empty} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.Location)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.Location>|undefined}
 *     The XHR Node Readable Stream
 */
proto.DemoServiceClient.prototype.getLocation =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/DemoService/GetLocation',
      request,
      metadata || {},
      methodDescriptor_DemoService_GetLocation,
      callback);
};


/**
 * @param {!proto.Empty} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.Location>}
 *     Promise that resolves to the response
 */
proto.DemoServicePromiseClient.prototype.getLocation =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/DemoService/GetLocation',
      request,
      metadata || {},
      methodDescriptor_DemoService_GetLocation);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.Empty,
 *   !proto.HistoryEntry>}
 */
const methodDescriptor_DemoService_GetHistory = new grpc.web.MethodDescriptor(
  '/DemoService/GetHistory',
  grpc.web.MethodType.SERVER_STREAMING,
  proto.Empty,
  proto.HistoryEntry,
  /**
   * @param {!proto.Empty} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.HistoryEntry.deserializeBinary
);


/**
 * @param {!proto.Empty} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.HistoryEntry>}
 *     The XHR Node Readable Stream
 */
proto.DemoServiceClient.prototype.getHistory =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/DemoService/GetHistory',
      request,
      metadata || {},
      methodDescriptor_DemoService_GetHistory);
};


/**
 * @param {!proto.Empty} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.HistoryEntry>}
 *     The XHR Node Readable Stream
 */
proto.DemoServicePromiseClient.prototype.getHistory =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/DemoService/GetHistory',
      request,
      metadata || {},
      methodDescriptor_DemoService_GetHistory);
};


module.exports = proto;

